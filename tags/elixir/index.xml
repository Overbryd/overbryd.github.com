<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Elixir on Lukas Rieder</title>
    <link>https://www.lukasrieder.com/tags/elixir/</link>
    <description>Recent content in Elixir on Lukas Rieder</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Copyright 2018, Lukas Rieder</copyright>
    <lastBuildDate>Mon, 01 Jan 2018 04:20:00 +0200</lastBuildDate>
    
	<atom:link href="https://www.lukasrieder.com/tags/elixir/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Connecting Apis With Flow</title>
      <link>https://www.lukasrieder.com/posts/connecting-apis-with-flow/</link>
      <pubDate>Mon, 01 Jan 2018 04:20:00 +0200</pubDate>
      
      <guid>https://www.lukasrieder.com/posts/connecting-apis-with-flow/</guid>
      <description>&lt;p&gt;Build an API connector with &lt;code&gt;Flow&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Say you need to consume events and act upon them. There are numerous services that fit this pattern.
A recent client of mine wanted just that. In this case it was an API connector, subscribing on events from AMQP, mapping the data to the target API structure and posting to it.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Elli on Elixir</title>
      <link>https://www.lukasrieder.com/posts/elli-on-elixir/</link>
      <pubDate>Wed, 18 Oct 2017 20:57:32 +0200</pubDate>
      
      <guid>https://www.lukasrieder.com/posts/elli-on-elixir/</guid>
      <description>In addition to the answers above, I would like to write up a complete guide on getting knutin/elli to work with Elixir. The above answers are correct, but I needed some more information to get up and running in my new elixir project.
 Implement a handler that has @behaviour :elli_handler
This is your router/controller. A bare minimum example version of this looks like this:
# lib/elli_handler.ex defmodule ElliHandler do @behaviour :elli_handler alias :elli_request, as: Request def handle(req, args) do handle(Request.</description>
    </item>
    
  </channel>
</rss>