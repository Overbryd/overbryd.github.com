---
layout: post
title: Xen let's get started
---

"This quickstart helped a lot":http://www.pastacode.de/howto-virtualisierung-mit-xen-unter-debian-lenny-linux-kernel-2626/de/

Install the requirements:

{% highlight bash %}
$ apt-get install xen-linux-system-2.6.26-1-xen-amd64 xen-utils-3.2-1 lvm2 python-xml xen-tools
{% endhighlight %}

Uncomment @(network-script network-bridge)@ and comment in @(network-script network-dummy)@ in @/etc/xen/xend-config.sxp@

{% highlight bash %}
##
# To bridge network traffic, like this:
#
# dom0: ----------------- bridge -> real eth0 -> the network
# |
# domU: fake eth0 -> vifN.0 -+
#
# use
#
(network-script network-bridge)
#
# Your default ethernet device is used as the outgoing interface, by default.
# To use a different one (e.g. eth1) use
#
# (network-script 'network-bridge netdev=eth1')
#
# The bridge is named xenbr0, by default. To rename the bridge, use
#
# (network-script 'network-bridge bridge=‘)
#
# It is possible to use the network-bridge script in more complicated
# scenarios, such as having two outgoing interfaces, with two bridges, and
# two fake interfaces per guest domain. To do things like this, write
# yourself a wrapper script, and call network-bridge from it, as appropriate.
#
#(network-script network-dummy)
{% endhighlight %}

Restart the system:

{% highlight bash %}
$ shutdown -r now
{% endhighlight %}

Check if xen is up and running:

{% highlight bash %}
$ xm list
{% endhighlight %}

Use the following @/etc/xen-tools/xen-tools.conf@ configuration: 

{% highlight bash %}
##
#  /etc/xen-tools/xen-tools.conf
##
#
#  This is the global configuration file for the scripts included
# within the xen-tools package.
#
#  For more details please see:
#
#        http://xen-tools.org/
#
##
 
 
##
#
# File Format
# ———–
#
#  Anything following a ‘#’ character is ignored as a comment.
#
#  Otherwise the format of this file "key = value".  The value of
# any keys in this file may be constructed via the output of a command.
#
#  For example:
#
#         kernel = /boot/vmlinuz-`uname -r`
#
##
 
 
 
#
##
#  Output directory for storing loopback images.
#
#  If you choose to use loopback images, which are simple to manage but
# slower than LVM partitions, then specify a directory here and uncomment
# the line.
#
#  New instances will be stored in subdirectories named after their
# hostnames.
#
##
dir = /srv/xen
#
 
#
##
#
# If you don’t wish to use loopback images then you may specify an
# LVM volume group here instead
#
##
# lvm = skx-vg
 
 
#
##
#
#  Installation method.
#
#  There are four distinct methods which you may to install a new copy
# of Linux to use in your Xen guest domain:
#
#   - Installation via the debootstrap command.
#   - Installation via the rpmstrap command.
#   - Installation via the rinse command.
#   - Installation by copying a directory containing a previous installation.
#   - Installation by untarring a previously archived image.
#
#  NOTE That if you use the "untar", or "copy" options you should ensure
# that the image you’re left with matches the ‘dist’ setting later in
# this file.
#
#
##
#
#
# install-method = [ debootstrap | rinse | rpmstrap | copy | tar ]
#
#
install-method = debootstrap
 
#
# If you’re using the "copy", or "tar" installation methods you must
# need to specify the source location to copy from, or the source
# .tar file to unpack.
#
# You may specify that with a line such as:
#
# install-source = /path/to/copy
# install-source = /some/path/img.tar
#
#
 
#
##
#  Command definitions.
##
#
# The "rinse", and "rpmstrap" commands are hardwired into
# the script, but if you wish to modify the commands which are executed
# when installing new systems by a "copy", "debootstrap", or "tar" method
# you can do so here:
#
# (This allows you to install from a .tar.bz file, rather than a plain
# tar file, use cdebootstrap, etc.)
#
# install-method=copy:
# copy-cmd = /bin/cp -a $src/* $dest
##
#install-method=debootstrap:
debootstrap-cmd=/usr/sbin/debootstrap
#
# install-method=tar:
# tar-cmd  = /bin/tar –numeric-owner -xvf $src
#
#
 
#
##
#  Disk and Sizing options.
##
#
size   = 50Gb      # Disk image size.
memory = 6144Mb    # Memory size
swap   = 3072Mb    # Swap size
# noswap = 1      # Don’t use swap at all for the new system.
fs     = ext3     # use the EXT3 filesystem for the disk image.
dist   = lenny     # Default distribution to install.
image  = sparse   # Specify sparse vs. full disk images.

##
# Networking setup values.
##
 
#
# Uncomment and adjust these network settings if you wish to give your
# new instances static IP addresses.
#
# gateway   = 192.168.1.1
# netmask   = 255.255.255.0
# broadcast = 192.168.1.255
#
# Uncomment this if you wish the images to use DHCP
#
dhcp = 1
 
#
# Uncomment the following line if you wish to interactively setup
# a new root password for images.
#
passwd = 1
 
#
# If you’d like all accounts on your host system which are not present
# on the guest system to be copied over then uncomment the following line.
#
# accounts = 1
#
 
#
# Default kernel and ramdisk to use for the virtual servers
#
kernel      = /boot/vmlinuz-`uname -r`
initrd      = /boot/initrd.img-`uname -r`
 
#
#  The architecture to use when using debootstrap, rinse, or rpmstrap.
#
#  This is most useful on 64 bit host machines, for other systems it
# doesn’t need to be used.
#
arch=amd64
#
 
#
# The default mirror for debootstrap to install Debian-derived distributions
#
mirror = ftp://mirror.hetzner.de/debian/
 
#
#  Filesystem options for the different filesystems we support.
#
ext3_options   = noatime,nodiratime,errors=remount-ro
ext2_options   = noatime,nodiratime,errors=remount-ro
xfs_options    = defaults
reiser_options = defaults

#
#  Uncomment if you wish newly created images to boot once they’ve been
# created.
#
boot = 1
 
 
#
#  If you’re using the lenny or later version of the Xen guest kernel you will
# need to make sure that you use ‘hvc0′ for the guest serial device,
# and ‘xvdX’ instead of ’sdX’ for serial devices.
#
#  You may specify the things to use here:
#
serial_device = hvc0 #default
# serial_device = tty1
#
disk_device = xvda #default
# disk_device = sda
#
 
 
#
#  Here we specify the output directory which the Xen configuration
# files will be written to, and the suffix to give them.
#
#  Historically xen-tools have created configuration files in /etc/xen,
# and given each file the name $hostname.cfg.  If you want to change
# that behaviour you may do so here.
#
#
# output    = /etc/xen
# extension = .cfg
#
{% endhighlight %}

Create the image (--role=udev is important because otherwise you can't login on the guest)

{% highlight bash %}
$ xen-create-image --hostname test1 --role=udev
{% endhighlight %}

Escape from the @xm console@ with @CTRL + ALT + 6@ on a german apple keyboard.